@startuml
abstract class Entity
{
-__sim:Simulation
-__name:str
+Entity(simulation:Simulation)
+{abstract}start()
+{abstract}handle_event(event:Event)
+end(clock:float)
#_add_event(event:Event)
+get_name():str
+print_state()
}

abstract class Simulation
{
+clock:float
-__future_event_list:queue.PriorityQueue
+Simulation()
+run(entity_list:list<Entity>, runtime:float)
-__print_sim_table_header()
-__print_sim_table_row()
-__run(float)
-__end()
+add_event(event:Event)
}

class Event
{
+time:float
+recipient:Any
+item:Any

}

enum Product
{
P1
P2
P3
}

enum Component
{
C1
C2
C3
}


class WorkStation
{
+product_type:Product
+buffer_list:list<buffer>
+idle:bool
+time_idle:float
+products_produced:float

+WorkStation(product_type:Product, buffer_list:list<buffer>)
+has_required_components()
+create_product()
+handle_event(event:Event)
+print_state()
}

class Inspector
{
+type:Component
+buffer:list<buffer>
+blocked:bool
+blocked_component:Component
+time_blocked:float
+total_time_blocked:float

+Inspector(cp)
+create_component()
+handle_event(event:Event)
+print_state()
}

class Buffer
{
+component_type:Component
+priority:int
+queue:list<Component>
+work_station:WorkStation
+inspector:Inspector
+Buffer(component_type:Component, priority:int)
+add_work_station(work_station)
+add_inspector(inspector:Inspector)
+add_component(component:Component)
+pop_component()
+print_state()
}

class ManufacturingSim
{
+buffer1:Buffer
+buffer2:Buffer
+buffer3:Buffer
+buffer4:Buffer
+buffer5:Buffer

+inspector1:Inspector
+inspector2:Inspector

+workstation1:WorkStation
+workstation2:WorkStation
+workstation3:WorkStation

+ManufacturingSim()
+run()
}

Entity <|-- Inspector
Entity <|-- WorkStation
Entity <|-- Buffer


Simulation <|-- ManufacturingSim

'buffers and stuff have 1 to 1 mapping

Simulation "1" o-- "N" Entity

Inspector -- Component:produces
WorkStation -- Component:consumes
Buffer -- Component:queues
WorkStation -- Product:produces

Entity -- Event:produces and consumes
Simulation -- Event: queues

@enduml